/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package SubVentanas;

import java.awt.event.ActionEvent;
import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Time;

import javax.swing.JFrame;
import javax.swing.SwingUtilities;

import Principal.frmRecepcionista;

/**
 *
 * @author Nicolas
 */
public class frmCargarServicios extends javax.swing.JPanel {

	String url = "jdbc:postgresql://localhost:5432/ProyectoFinal";
    String user = "postgres";
    String password = "Nicolas1118";
    String sql = "SELECT * FROM cliente WHERE cedula = ?";
    /**
     * Creates new form frmCargarServicios
     */
    public frmCargarServicios() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    //@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {



        txtingresoRegistrarServicios = new javax.swing.JLabel();
        jLabelCodigoReserva = new javax.swing.JLabel();
        jTextFieldCodigoReserva = new javax.swing.JTextField();
        jLabelCodigoServicio = new javax.swing.JLabel();
        jTextFieldCodigoServicio = new javax.swing.JTextField();
        jLabelHora = new javax.swing.JLabel();
        jTextFieldHora = new javax.swing.JTextField();
        jButtonRegistrar = new javax.swing.JButton();
        jLabelFecha = new javax.swing.JLabel();
        jTextFieldFecha = new javax.swing.JTextField();
        jButtonAtras = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        txtingresoRegistrarServicios.setFont(new java.awt.Font("Franklin Gothic Demi", 0, 18)); // NOI18N
        txtingresoRegistrarServicios.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        txtingresoRegistrarServicios.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagene/favicon.png"))); // NOI18N
        txtingresoRegistrarServicios.setText("RESGISTRAR SERVICIOS");

        jLabelCodigoReserva.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 12)); // NOI18N
        jLabelCodigoReserva.setText("CEDULA CLIENTE");

        jLabelCodigoServicio.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 12)); // NOI18N
        jLabelCodigoServicio.setText("CODIGO SERVICIO");

        jLabelHora.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 12)); // NOI18N
        jLabelHora.setText("HORA");

        jButtonRegistrar.setBackground(new java.awt.Color(204, 204, 255));
        jButtonRegistrar.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 12)); // NOI18N
        jButtonRegistrar.setText("REGISTRAR");
        jButtonRegistrar.setBorder(null);
		jButtonRegistrar.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonRegistrarActionPerformed(evt);
			}

			
		});

        jLabelFecha.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 12)); // NOI18N
        jLabelFecha.setText("FECHA");

        jButtonAtras.setBackground(new java.awt.Color(204, 204, 255));
        jButtonAtras.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 12)); // NOI18N
        jButtonAtras.setText("ATRAS");
        jButtonAtras.setBorder(null);
		jButtonAtras.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonAtrasActionPerformed(evt);
			}


		});	
		

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(66, 66, 66)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(txtingresoRegistrarServicios, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabelCodigoReserva, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabelCodigoServicio, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jTextFieldCodigoReserva)
                                .addComponent(jTextFieldCodigoServicio))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonAtras, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonRegistrar, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldFecha)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelHora, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextFieldHora, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(82, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(txtingresoRegistrarServicios, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelCodigoReserva, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldCodigoReserva, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelCodigoServicio, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldCodigoServicio, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelHora, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldHora, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonRegistrar, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAtras, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18))
        );
    }// </editor-fold>        
	
	private void jButtonRegistrarActionPerformed(ActionEvent evt) {
        int cedula_cliente = Integer.parseInt(jTextFieldCodigoReserva.getText());
        int codigo_servicio = Integer.parseInt(jTextFieldCodigoServicio.getText());
        Date fecha = Date.valueOf(jTextFieldFecha.getText());
        Time hora = Time.valueOf(jTextFieldHora.getText());

        try (Connection conn = DriverManager.getConnection(url, user, password)) {
            // Verificar existencia de cedula en tabla cliente
            String sqlCedula = "SELECT cedula FROM cliente WHERE cedula = ?";
            try (PreparedStatement stmtCedula = conn.prepareStatement(sqlCedula)) {
                stmtCedula.setInt(1, cedula_cliente);
                try (ResultSet rsCedula = stmtCedula.executeQuery()) {
                    if (!rsCedula.next()) {
                        // Cedula no encontrada
                        // Aquí puedes manejar la lógica de error o mensaje al usuario
                        return;
                    }
                }
            }

            // Verificar existencia de codigo de servicio en tabla servicios
            String sqlServicio = "SELECT cod_serv FROM servicios WHERE cod_serv = ?";
            try (PreparedStatement stmtServicio = conn.prepareStatement(sqlServicio)) {
                stmtServicio.setInt(1, codigo_servicio);
                try (ResultSet rsServicio = stmtServicio.executeQuery()) {
                    if (!rsServicio.next()) {
                        // Codigo de servicio no encontrado
                        // Aquí puedes manejar la lógica de error o mensaje al usuario
                        return;
                    }
                }
            }

            // Verificar reserva asociada al cliente y servicio
            String sqlReserva = "SELECT cod_c FROM reserva WHERE num_hab IN (SELECT num_hab FROM habitacion WHERE estado = 'Ocupada' AND num_hab IN (SELECT num_hab FROM tiene WHERE cod_serv = ?))";
            try (PreparedStatement stmtReserva = conn.prepareStatement(sqlReserva)) {
                stmtReserva.setInt(1, codigo_servicio);
                try (ResultSet rsReserva = stmtReserva.executeQuery()) {
                    boolean reservaValida = false;
                    while (rsReserva.next()) {
                        if (rsReserva.getInt("cod_c") == cedula_cliente) {
                            reservaValida = true;
                            break;
                        }
                    }
                    if (!reservaValida) {
                        // Reserva no encontrada para el cliente y servicio especificados
                        // Aquí puedes manejar la lógica de error o mensaje al usuario
                        return;
                    }
                }
            }

            // Insertar en tabla check_out
            String sqlInsertCheckOut = "INSERT INTO check_out (codigo, hora_salida, factura, codigo_reserva) VALUES (DEFAULT, null, null, ?)";
            int cod_reserva = obtenerCodReserva(conn, cedula_cliente, codigo_servicio);
            try (PreparedStatement stmtInsertCheckOut = conn.prepareStatement(sqlInsertCheckOut, Statement.RETURN_GENERATED_KEYS)) {
                stmtInsertCheckOut.setInt(1, cod_reserva);
                stmtInsertCheckOut.executeUpdate();
                ResultSet generatedKeys = stmtInsertCheckOut.getGeneratedKeys();
                int cod_check_out = -1;
                if (generatedKeys.next()) {
                    cod_check_out = generatedKeys.getInt(1);
                } else {
                    // Error al obtener el código generado
                    // Aquí puedes manejar la lógica de error o mensaje al usuario
                    return;
                }

                // Insertar en tabla cargados
                String sqlInsertCargados = "INSERT INTO cargados (cod_check_out, cod_serv, fecha, hora) VALUES (?, ?, ?, ?)";
                try (PreparedStatement stmtInsertCargados = conn.prepareStatement(sqlInsertCargados)) {
                    stmtInsertCargados.setInt(1, cod_check_out);
                    stmtInsertCargados.setInt(2, codigo_servicio);
                    stmtInsertCargados.setDate(3, fecha);
                    stmtInsertCargados.setTime(4, hora);
                    stmtInsertCargados.executeUpdate();
                }
            }

        } catch (SQLException e) {
            e.printStackTrace();
            // Aquí maneja la excepción adecuadamente
        }
    }

    private int obtenerCodReserva(Connection conn, int cedula_cliente, int codigo_servicio) throws SQLException {
		int cod_reserva = -1;
		
		// Consulta SQL para obtener el código de reserva basado en la cédula del cliente y el código de servicio
		String sql = "SELECT codigo_reserva FROM reserva WHERE cod_c = ? AND cod_serv = ? ";
		
		try (PreparedStatement stmt = conn.prepareStatement(sql)) {
			stmt.setInt(1, cedula_cliente);
			stmt.setInt(2, codigo_servicio);
			
			try (ResultSet rs = stmt.executeQuery()) {
				if (rs.next()) {
					cod_reserva = rs.getInt("codigo_reserva");
				} else {
					// Si no se encuentra ninguna reserva válida, puedes manejarlo aquí
					// Por ejemplo, lanzar una excepción o devolver un valor específico
					// Dependiendo de tus requisitos de negocio
					throw new SQLException("No se encontró una reserva válida para el cliente y el servicio especificados.");
				}
			}
		}
		
		return cod_reserva;
	}
	

	private void jButtonAtrasActionPerformed(ActionEvent evt) {
		JFrame Recepcionista = new JFrame("Recepcionista");
        Recepcionista.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        Recepcionista.add(new frmRecepcionista());
        Recepcionista.pack();
        Recepcionista.setLocationRelativeTo(null);
        Recepcionista.setVisible(true);

        JFrame ClienteFrame = (JFrame) SwingUtilities.getWindowAncestor(this);
        ClienteFrame.dispose();
	}


    // Variables declaration - do not modify                     
    private javax.swing.JButton jButtonAtras;
    private javax.swing.JButton jButtonRegistrar;
    private javax.swing.JLabel jLabelCodigoReserva;
    private javax.swing.JLabel jLabelCodigoServicio;
    private javax.swing.JLabel jLabelFecha;
    private javax.swing.JLabel jLabelHora;
    private javax.swing.JTextField jTextFieldCodigoReserva;
    private javax.swing.JTextField jTextFieldCodigoServicio;
    private javax.swing.JTextField jTextFieldFecha;
    private javax.swing.JTextField jTextFieldHora;
    private javax.swing.JLabel txtingresoRegistrarServicios;
    // End of variables declaration                   
}
